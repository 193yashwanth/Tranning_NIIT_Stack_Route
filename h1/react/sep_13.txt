class App extends React.Component {
  constructor(props) {
    super(props);
    
    this.state = {
      data: 0
    }
    this.setNewNumber = this.setNewNumber.bind(this)
  };
  setNewNumber() {
    this.setState({data: this.state.data + 1})
  }
  render() {
    return (
      <div>
        <button onClick = {this.setNewNumber}>INCREMENT</button>
        <content myNumber = {this.stata.data}></content>
      </div>
    );
  }
}
class Content extends React.Component {
  componentWillMount() {
    console.log('Component Will Mount!')
  }
  componentDidMount(){
    console.log('Component Did Mount!')
  }
  componentWillRecieveProps(newProps) {
    console.log('Component Will Recieve Mount!')
  }
  shouldComponentUpdate(newProps, newState) {
    return true;
  }
  componentWillUpdate(newProps, newState) {
    console.log('Component Will Update!')
  }
  componentDidUpdate(newProps, newState) {
    console.log('Component Did Update!')
  }
  componentWillUNMoun(newProps, newState) {
    console.log('Component Will UNMount!')
  }
  render(){
    return (
      <div>
        <h3>{this.props.myNumber}</h3>
      </div>
    )
  }
}

ReactDOM.render(<App />, document.getElementById('mountNode'));

1=>
class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      data: 0
    }
    this.setNewNumber = this.setNewNumber.bind(this);
  };

  setNewNumber() {
    this.setState({ data: this.state.data + 1 });
  };

  render() {
    return (
      <div>
        <button onClick={this.setNewNumber}>INCREMENT</button>
        <Content myNumber={this.state.data} />
      </div>
    );
  }
}

class Content extends React.Component {
  componentWillMount() {
    console.log('Component Will Mount!')
  }

  componentDidMount() {
    console.log('Component Did Mount!')
  }

  componentWillReceiveProps(newProps) {
    console.log('Component Will Receive Props!')
  }

  shouldComponentUpdate(newProps, newState) {
    return true;
  }

  componentWillUpdate(newProps, newState) {
    console.log('Component Will Update!')
  }

  componentDidUpdate(newProps, newState) {
    console.log('Component Did Update!')
  }

  componentWillUnmount() {
    console.log('Component Will Unmount!')
  }

  render() {
    return (
      <div>
        <h3>{this.props.myNumber}</h3>
      </div>
    )
  }
}

ReactDOM.render(<App />, document.getElementById('mountNode'));

2=>
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state={
      mms: ""
    }
    this.message = this.message.bind(this)
  };
  message (e) {
    this.setState({mms: e.target.value});
  };
  render() {
    return (
      <div>
        <input type='text' value={this.state.mms} onChange={this.message} />
        <h4>{this.state.mms}</h4>
      </div>
    );
  }
}
ReactDOM.render(<App />, document.getElementById('mountNode'));

3=>
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state={
      data: "Initial data..."
    }
    this.updateState = this.updateState.bind(this)
  };
  updateState () {
    this.setState({data: 'Data updated from the child component...'});
  };
  render() {
    return (
      <div>
        <Content myDataProp = {this.state.data} updateStateProp = {this.updateState}></Content>
      </div>
    );
  }
}
class Content extends React.Component {
  render(){
    return (
        <div>
           <button onClick={this.props.updateStateProp}>CLICK</button>
          <h3>{this.props.myDataProp}</h3>
        </div>
    )
  }
}
ReactDOM.render(<App />, document.getElementById('mountNode'));

4=>

import ReactDOM from 'react-dom';

class App extends React.Component {
  constructor(props) {
    super(props);
    
    this.state={
      data: ""
    }
    this.updateState = this.updateState.bind(this);
    this.clearInput = this.clearInput.bind(this);
  };
  updateState(e) {
    this.setState({data: e.target.value});
  }
  clearInput () {
    this.setState({data: ""});
    ReactDOM.findDOMNode(this.refs.myInput).focus();
  };
  render() {
    return (
      <div>
        <input value = {this.state.data} onChange = {this.updateState} ref = "myInput"></input>
          <button onClick = {this.clearInput} >CLEAR</button>
          <h4>{this.state.data}</h4>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('mountNode'));

5=>
